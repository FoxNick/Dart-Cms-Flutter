///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class AllTypesDatasValueCurQueryListList {
/*
{
  "_id": "5f2ecdef40e1763fa80afa4e",
  "videoTitle": "守护者第三季",
  "director": "Umut,Aral",
  "videoImage": "https://images.cnblogsc.com/pic/upload/vod/2020-07/1595770107.jpg",
  "poster": "",
  "performer": "察合台,乌鲁索伊,Ayça,Aysin,Turan,哈扎尔,埃尔居奇卢,奥坎,亚拉伯克,布莉沁,碟兹奥古鲁,恩金.尤兹图尔克",
  "video_type": "5f2eca32fc3cd725c095fbd6",
  "video_rate": 0,
  "update_time": "2020-07-26 21:28:46",
  "language": "",
  "sub_region": "",
  "rel_time": "2020",
  "introduce": "他的任务就要展开。《伊斯坦堡的守护者》Netflix独家上线。 哈坎跟英雄完全沾不上边。当他发现自己与古代的神秘教团有著深刻渊源，并被授予保护伊斯坦堡的任务，他原先的现代生活就此产生天翻地覆的转变。他的家乡被神秘玄妙的不死力量威胁，而保护家园的责任全在他身上。对于这个任务，他不但没有心理准备，更心生抗拒，哈坎可以顺利完成守护伊斯坦堡的使命吗？",
  "remind_tip": "完结",
  "news_id": [
    "5f2eca32fc3cd725c095fbda"
  ],
  "popular": false,
  "allow_reply": false,
  "openSwiper": false,
  "display": true,
  "scource_sort": false
} 
*/

  String Id;
  String videoTitle;
  String director;
  String videoImage;
  String poster;
  String performer;
  String videoType;
  int videoRate;
  String updateTime;
  String language;
  String subRegion;
  String relTime;
  String introduce;
  String remindTip;
  List<String> newsId;
  bool popular;
  bool allowReply;
  bool openSwiper;
  bool display;
  bool scourceSort;

  AllTypesDatasValueCurQueryListList({
    this.Id,
    this.videoTitle,
    this.director,
    this.videoImage,
    this.poster,
    this.performer,
    this.videoType,
    this.videoRate,
    this.updateTime,
    this.language,
    this.subRegion,
    this.relTime,
    this.introduce,
    this.remindTip,
    this.newsId,
    this.popular,
    this.allowReply,
    this.openSwiper,
    this.display,
    this.scourceSort,
  });
  AllTypesDatasValueCurQueryListList.fromJson(Map<String, dynamic> json) {
    Id = json["_id"]?.toString();
    videoTitle = json["videoTitle"]?.toString();
    director = json["director"]?.toString();
    videoImage = json["videoImage"]?.toString();
    poster = json["poster"]?.toString();
    performer = json["performer"]?.toString();
    videoType = json["video_type"]?.toString();
    videoRate = json["video_rate"]?.toInt();
    updateTime = json["update_time"]?.toString();
    language = json["language"]?.toString();
    subRegion = json["sub_region"]?.toString();
    relTime = json["rel_time"]?.toString();
    introduce = json["introduce"]?.toString();
    remindTip = json["remind_tip"]?.toString();
    if (json["news_id"] != null) {
      var v = json["news_id"];
      var arr0 = List<String>();
      v.forEach((v) {
        arr0.add(v.toString());
      });
      newsId = arr0;
    }
    popular = json["popular"];
    allowReply = json["allow_reply"];
    openSwiper = json["openSwiper"];
    display = json["display"];
    scourceSort = json["scource_sort"];
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["_id"] = Id;
    data["videoTitle"] = videoTitle;
    data["director"] = director;
    data["videoImage"] = videoImage;
    data["poster"] = poster;
    data["performer"] = performer;
    data["video_type"] = videoType;
    data["video_rate"] = videoRate;
    data["update_time"] = updateTime;
    data["language"] = language;
    data["sub_region"] = subRegion;
    data["rel_time"] = relTime;
    data["introduce"] = introduce;
    data["remind_tip"] = remindTip;
    if (newsId != null) {
      var v = newsId;
      var arr0 = List();
      v.forEach((v) {
        arr0.add(v);
      });
      data["news_id"] = arr0;
    }
    data["popular"] = popular;
    data["allow_reply"] = allowReply;
    data["openSwiper"] = openSwiper;
    data["display"] = display;
    data["scource_sort"] = scourceSort;
    return data;
  }
}

class AllTypesDatasValueCurQueryList {
/*
{
  "page": 1,
  "total": 859,
  "list": [
    {
      "_id": "5f2ecdef40e1763fa80afa4e",
      "videoTitle": "守护者第三季",
      "director": "Umut,Aral",
      "videoImage": "https://images.cnblogsc.com/pic/upload/vod/2020-07/1595770107.jpg",
      "poster": "",
      "performer": "察合台,乌鲁索伊,Ayça,Aysin,Turan,哈扎尔,埃尔居奇卢,奥坎,亚拉伯克,布莉沁,碟兹奥古鲁,恩金.尤兹图尔克",
      "video_type": "5f2eca32fc3cd725c095fbd6",
      "video_rate": 0,
      "update_time": "2020-07-26 21:28:46",
      "language": "",
      "sub_region": "",
      "rel_time": "2020",
      "introduce": "他的任务就要展开。《伊斯坦堡的守护者》Netflix独家上线。 哈坎跟英雄完全沾不上边。当他发现自己与古代的神秘教团有著深刻渊源，并被授予保护伊斯坦堡的任务，他原先的现代生活就此产生天翻地覆的转变。他的家乡被神秘玄妙的不死力量威胁，而保护家园的责任全在他身上。对于这个任务，他不但没有心理准备，更心生抗拒，哈坎可以顺利完成守护伊斯坦堡的使命吗？",
      "remind_tip": "完结",
      "news_id": [
        "5f2eca32fc3cd725c095fbda"
      ],
      "popular": false,
      "allow_reply": false,
      "openSwiper": false,
      "display": true,
      "scource_sort": false
    }
  ]
} 
*/

  int page;
  int total;
  List<AllTypesDatasValueCurQueryListList> list;

  AllTypesDatasValueCurQueryList({
    this.page,
    this.total,
    this.list,
  });
  AllTypesDatasValueCurQueryList.fromJson(Map<String, dynamic> json) {
    page = json["page"]?.toInt();
    total = json["total"]?.toInt();
    if (json["list"] != null) {
      var v = json["list"];
      var arr0 = List<AllTypesDatasValueCurQueryListList>();
      v.forEach((v) {
        arr0.add(AllTypesDatasValueCurQueryListList.fromJson(v));
      });
      list = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["page"] = page;
    data["total"] = total;
    if (list != null) {
      var v = list;
      var arr0 = List();
      v.forEach((v) {
        arr0.add(v.toJson());
      });
      data["list"] = arr0;
    }
    return data;
  }
}

class AllTypesDatasValueAllTypeItemLanguageList {
/*
{
  "name": "全部",
  "_id": "",
  "active": true
} 
*/

  String name;
  String Id;
  bool active;

  AllTypesDatasValueAllTypeItemLanguageList({
    this.name,
    this.Id,
    this.active,
  });
  AllTypesDatasValueAllTypeItemLanguageList.fromJson(
      Map<String, dynamic> json) {
    name = json["name"]?.toString();
    Id = json["_id"]?.toString();
    active = json["active"];
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["name"] = name;
    data["_id"] = Id;
    data["active"] = active;
    return data;
  }
}

class AllTypesDatasValueAllTypeItemLanguage {
/*
{
  "label": "语言",
  "list": [
    {
      "name": "全部",
      "_id": "",
      "active": true
    }
  ]
} 
*/

  String label;
  List<AllTypesDatasValueAllTypeItemLanguageList> list;

  AllTypesDatasValueAllTypeItemLanguage({
    this.label,
    this.list,
  });
  AllTypesDatasValueAllTypeItemLanguage.fromJson(Map<String, dynamic> json) {
    label = json["label"]?.toString();
    if (json["list"] != null) {
      var v = json["list"];
      var arr0 = List<AllTypesDatasValueAllTypeItemLanguageList>();
      v.forEach((v) {
        arr0.add(AllTypesDatasValueAllTypeItemLanguageList.fromJson(v));
      });
      list = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["label"] = label;
    if (list != null) {
      var v = list;
      var arr0 = List();
      v.forEach((v) {
        arr0.add(v.toJson());
      });
      data["list"] = arr0;
    }
    return data;
  }
}

class AllTypesDatasValueAllTypeItemYearsList {
/*
{
  "name": "全部",
  "_id": "",
  "active": true
} 
*/

  String name;
  String Id;
  bool active;

  AllTypesDatasValueAllTypeItemYearsList({
    this.name,
    this.Id,
    this.active,
  });
  AllTypesDatasValueAllTypeItemYearsList.fromJson(Map<String, dynamic> json) {
    name = json["name"]?.toString();
    Id = json["_id"]?.toString();
    active = json["active"];
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["name"] = name;
    data["_id"] = Id;
    data["active"] = active;
    return data;
  }
}

class AllTypesDatasValueAllTypeItemYears {
/*
{
  "label": "年代",
  "list": [
    {
      "name": "全部",
      "_id": "",
      "active": true
    }
  ]
} 
*/

  String label;
  List<AllTypesDatasValueAllTypeItemYearsList> list;

  AllTypesDatasValueAllTypeItemYears({
    this.label,
    this.list,
  });
  AllTypesDatasValueAllTypeItemYears.fromJson(Map<String, dynamic> json) {
    label = json["label"]?.toString();
    if (json["list"] != null) {
      var v = json["list"];
      var arr0 = List<AllTypesDatasValueAllTypeItemYearsList>();
      v.forEach((v) {
        arr0.add(AllTypesDatasValueAllTypeItemYearsList.fromJson(v));
      });
      list = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["label"] = label;
    if (list != null) {
      var v = list;
      var arr0 = List();
      v.forEach((v) {
        arr0.add(v.toJson());
      });
      data["list"] = arr0;
    }
    return data;
  }
}

class AllTypesDatasValueAllTypeItemRegionList {
/*
{
  "name": "全部",
  "_id": "",
  "active": true
} 
*/

  String name;
  String Id;
  bool active;

  AllTypesDatasValueAllTypeItemRegionList({
    this.name,
    this.Id,
    this.active,
  });
  AllTypesDatasValueAllTypeItemRegionList.fromJson(Map<String, dynamic> json) {
    name = json["name"]?.toString();
    Id = json["_id"]?.toString();
    active = json["active"];
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["name"] = name;
    data["_id"] = Id;
    data["active"] = active;
    return data;
  }
}

class AllTypesDatasValueAllTypeItemRegion {
/*
{
  "label": "地区",
  "list": [
    {
      "name": "全部",
      "_id": "",
      "active": true
    }
  ]
} 
*/

  String label;
  List<AllTypesDatasValueAllTypeItemRegionList> list;

  AllTypesDatasValueAllTypeItemRegion({
    this.label,
    this.list,
  });
  AllTypesDatasValueAllTypeItemRegion.fromJson(Map<String, dynamic> json) {
    label = json["label"]?.toString();
    if (json["list"] != null) {
      var v = json["list"];
      var arr0 = List<AllTypesDatasValueAllTypeItemRegionList>();
      v.forEach((v) {
        arr0.add(AllTypesDatasValueAllTypeItemRegionList.fromJson(v));
      });
      list = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["label"] = label;
    if (list != null) {
      var v = list;
      var arr0 = List();
      v.forEach((v) {
        arr0.add(v.toJson());
      });
      data["list"] = arr0;
    }
    return data;
  }
}

class AllTypesDatasValueAllTypeItemTypeList {
/*
{
  "name": "全部",
  "_id": "",
  "active": true
} 
*/

  String name;
  String Id;
  bool active;

  AllTypesDatasValueAllTypeItemTypeList({
    this.name,
    this.Id,
    this.active,
  });
  AllTypesDatasValueAllTypeItemTypeList.fromJson(Map<String, dynamic> json) {
    name = json["name"]?.toString();
    Id = json["_id"]?.toString();
    active = json["active"];
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["name"] = name;
    data["_id"] = Id;
    data["active"] = active;
    return data;
  }
}

class AllTypesDatasValueAllTypeItemType {
/*
{
  "label": "分类",
  "list": [
    {
      "name": "全部",
      "_id": "",
      "active": true
    }
  ]
} 
*/

  String label;
  List<AllTypesDatasValueAllTypeItemTypeList> list;

  AllTypesDatasValueAllTypeItemType({
    this.label,
    this.list,
  });
  AllTypesDatasValueAllTypeItemType.fromJson(Map<String, dynamic> json) {
    label = json["label"]?.toString();
    if (json["list"] != null) {
      var v = json["list"];
      var arr0 = List<AllTypesDatasValueAllTypeItemTypeList>();
      v.forEach((v) {
        arr0.add(AllTypesDatasValueAllTypeItemTypeList.fromJson(v));
      });
      list = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["label"] = label;
    if (list != null) {
      var v = list;
      var arr0 = List();
      v.forEach((v) {
        arr0.add(v.toJson());
      });
      data["list"] = arr0;
    }
    return data;
  }
}

class AllTypesDatasValueAllTypeItemNavList {
/*
{
  "name": "全部",
  "_id": "",
  "active": true
} 
*/

  String name;
  String Id;
  bool active;

  AllTypesDatasValueAllTypeItemNavList({
    this.name,
    this.Id,
    this.active,
  });
  AllTypesDatasValueAllTypeItemNavList.fromJson(Map<String, dynamic> json) {
    name = json["name"]?.toString();
    Id = json["_id"]?.toString();
    active = json["active"];
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["name"] = name;
    data["_id"] = Id;
    data["active"] = active;
    return data;
  }
}

class AllTypesDatasValueAllTypeItemNav {
/*
{
  "label": "导航",
  "list": [
    {
      "name": "全部",
      "_id": "",
      "active": true
    }
  ]
} 
*/

  String label;
  List<AllTypesDatasValueAllTypeItemNavList> list;

  AllTypesDatasValueAllTypeItemNav({
    this.label,
    this.list,
  });
  AllTypesDatasValueAllTypeItemNav.fromJson(Map<String, dynamic> json) {
    label = json["label"]?.toString();
    if (json["list"] != null) {
      var v = json["list"];
      var arr0 = List<AllTypesDatasValueAllTypeItemNavList>();
      v.forEach((v) {
        arr0.add(AllTypesDatasValueAllTypeItemNavList.fromJson(v));
      });
      list = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["label"] = label;
    if (list != null) {
      var v = list;
      var arr0 = List();
      v.forEach((v) {
        arr0.add(v.toJson());
      });
      data["list"] = arr0;
    }
    return data;
  }
}

class AllTypesDatasValueAllTypeItem {
/*
{
  "nav": {
    "label": "导航",
    "list": [
      {
        "name": "全部",
        "_id": "",
        "active": true
      }
    ]
  },
  "type": {
    "label": "分类",
    "list": [
      {
        "name": "全部",
        "_id": "",
        "active": true
      }
    ]
  },
  "region": {
    "label": "地区",
    "list": [
      {
        "name": "全部",
        "_id": "",
        "active": true
      }
    ]
  },
  "years": {
    "label": "年代",
    "list": [
      {
        "name": "全部",
        "_id": "",
        "active": true
      }
    ]
  },
  "language": {
    "label": "语言",
    "list": [
      {
        "name": "全部",
        "_id": "",
        "active": true
      }
    ]
  }
} 
*/

  AllTypesDatasValueAllTypeItemNav nav;
  AllTypesDatasValueAllTypeItemType type;
  AllTypesDatasValueAllTypeItemRegion region;
  AllTypesDatasValueAllTypeItemYears years;
  AllTypesDatasValueAllTypeItemLanguage language;

  AllTypesDatasValueAllTypeItem({
    this.nav,
    this.type,
    this.region,
    this.years,
    this.language,
  });
  AllTypesDatasValueAllTypeItem.fromJson(Map<String, dynamic> json) {
    nav = json["nav"] != null
        ? AllTypesDatasValueAllTypeItemNav.fromJson(json["nav"])
        : null;
    type = json["type"] != null
        ? AllTypesDatasValueAllTypeItemType.fromJson(json["type"])
        : null;
    region = json["region"] != null
        ? AllTypesDatasValueAllTypeItemRegion.fromJson(json["region"])
        : null;
    years = json["years"] != null
        ? AllTypesDatasValueAllTypeItemYears.fromJson(json["years"])
        : null;
    language = json["language"] != null
        ? AllTypesDatasValueAllTypeItemLanguage.fromJson(json["language"])
        : null;
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    if (nav != null) {
      data["nav"] = nav.toJson();
    }
    if (type != null) {
      data["type"] = type.toJson();
    }
    if (region != null) {
      data["region"] = region.toJson();
    }
    if (years != null) {
      data["years"] = years.toJson();
    }
    if (language != null) {
      data["language"] = language.toJson();
    }
    return data;
  }
}

class AllTypesDatasValue {
/*
{
  "allTypeItem": {
    "nav": {
      "label": "导航",
      "list": [
        {
          "name": "全部",
          "_id": "",
          "active": true
        }
      ]
    },
    "type": {
      "label": "分类",
      "list": [
        {
          "name": "全部",
          "_id": "",
          "active": true
        }
      ]
    },
    "region": {
      "label": "地区",
      "list": [
        {
          "name": "全部",
          "_id": "",
          "active": true
        }
      ]
    },
    "years": {
      "label": "年代",
      "list": [
        {
          "name": "全部",
          "_id": "",
          "active": true
        }
      ]
    },
    "language": {
      "label": "语言",
      "list": [
        {
          "name": "全部",
          "_id": "",
          "active": true
        }
      ]
    }
  },
  "curQueryList": {
    "page": 1,
    "total": 859,
    "list": [
      {
        "_id": "5f2ecdef40e1763fa80afa4e",
        "videoTitle": "守护者第三季",
        "director": "Umut,Aral",
        "videoImage": "https://images.cnblogsc.com/pic/upload/vod/2020-07/1595770107.jpg",
        "poster": "",
        "performer": "察合台,乌鲁索伊,Ayça,Aysin,Turan,哈扎尔,埃尔居奇卢,奥坎,亚拉伯克,布莉沁,碟兹奥古鲁,恩金.尤兹图尔克",
        "video_type": "5f2eca32fc3cd725c095fbd6",
        "video_rate": 0,
        "update_time": "2020-07-26 21:28:46",
        "language": "",
        "sub_region": "",
        "rel_time": "2020",
        "introduce": "他的任务就要展开。《伊斯坦堡的守护者》Netflix独家上线。 哈坎跟英雄完全沾不上边。当他发现自己与古代的神秘教团有著深刻渊源，并被授予保护伊斯坦堡的任务，他原先的现代生活就此产生天翻地覆的转变。他的家乡被神秘玄妙的不死力量威胁，而保护家园的责任全在他身上。对于这个任务，他不但没有心理准备，更心生抗拒，哈坎可以顺利完成守护伊斯坦堡的使命吗？",
        "remind_tip": "完结",
        "news_id": [
          "5f2eca32fc3cd725c095fbda"
        ],
        "popular": false,
        "allow_reply": false,
        "openSwiper": false,
        "display": true,
        "scource_sort": false
      }
    ]
  },
  "publicCode": ""
} 
*/

  AllTypesDatasValueAllTypeItem allTypeItem;
  AllTypesDatasValueCurQueryList curQueryList;
  String publicCode;

  AllTypesDatasValue({
    this.allTypeItem,
    this.curQueryList,
    this.publicCode,
  });
  AllTypesDatasValue.fromJson(Map<String, dynamic> json) {
    allTypeItem = json["allTypeItem"] != null
        ? AllTypesDatasValueAllTypeItem.fromJson(json["allTypeItem"])
        : null;
    curQueryList = json["curQueryList"] != null
        ? AllTypesDatasValueCurQueryList.fromJson(json["curQueryList"])
        : null;
    publicCode = json["publicCode"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    if (allTypeItem != null) {
      data["allTypeItem"] = allTypeItem.toJson();
    }
    if (curQueryList != null) {
      data["curQueryList"] = curQueryList.toJson();
    }
    data["publicCode"] = publicCode;
    return data;
  }
}

class AllTypesDatas {
/*
{
  "code": 200,
  "text": "操作成功！",
  "value": {
    "allTypeItem": {
      "nav": {
        "label": "导航",
        "list": [
          {
            "name": "全部",
            "_id": "",
            "active": true
          }
        ]
      },
      "type": {
        "label": "分类",
        "list": [
          {
            "name": "全部",
            "_id": "",
            "active": true
          }
        ]
      },
      "region": {
        "label": "地区",
        "list": [
          {
            "name": "全部",
            "_id": "",
            "active": true
          }
        ]
      },
      "years": {
        "label": "年代",
        "list": [
          {
            "name": "全部",
            "_id": "",
            "active": true
          }
        ]
      },
      "language": {
        "label": "语言",
        "list": [
          {
            "name": "全部",
            "_id": "",
            "active": true
          }
        ]
      }
    },
    "curQueryList": {
      "page": 1,
      "total": 859,
      "list": [
        {
          "_id": "5f2ecdef40e1763fa80afa4e",
          "videoTitle": "守护者第三季",
          "director": "Umut,Aral",
          "videoImage": "https://images.cnblogsc.com/pic/upload/vod/2020-07/1595770107.jpg",
          "poster": "",
          "performer": "察合台,乌鲁索伊,Ayça,Aysin,Turan,哈扎尔,埃尔居奇卢,奥坎,亚拉伯克,布莉沁,碟兹奥古鲁,恩金.尤兹图尔克",
          "video_type": "5f2eca32fc3cd725c095fbd6",
          "video_rate": 0,
          "update_time": "2020-07-26 21:28:46",
          "language": "",
          "sub_region": "",
          "rel_time": "2020",
          "introduce": "他的任务就要展开。《伊斯坦堡的守护者》Netflix独家上线。 哈坎跟英雄完全沾不上边。当他发现自己与古代的神秘教团有著深刻渊源，并被授予保护伊斯坦堡的任务，他原先的现代生活就此产生天翻地覆的转变。他的家乡被神秘玄妙的不死力量威胁，而保护家园的责任全在他身上。对于这个任务，他不但没有心理准备，更心生抗拒，哈坎可以顺利完成守护伊斯坦堡的使命吗？",
          "remind_tip": "完结",
          "news_id": [
            "5f2eca32fc3cd725c095fbda"
          ],
          "popular": false,
          "allow_reply": false,
          "openSwiper": false,
          "display": true,
          "scource_sort": false
        }
      ]
    },
    "publicCode": ""
  }
} 
*/

  int code;
  String text;
  AllTypesDatasValue value;

  AllTypesDatas({
    this.code,
    this.text,
    this.value,
  });
  AllTypesDatas.fromJson(Map<String, dynamic> json) {
    code = json["code"]?.toInt();
    text = json["text"]?.toString();
    value = json["value"] != null
        ? AllTypesDatasValue.fromJson(json["value"])
        : null;
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["code"] = code;
    data["text"] = text;
    if (value != null) {
      data["value"] = value.toJson();
    }
    return data;
  }
}
